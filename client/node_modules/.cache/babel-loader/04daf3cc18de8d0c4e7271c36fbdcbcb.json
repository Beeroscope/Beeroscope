{"ast":null,"code":"var _jsxFileName = \"K:\\\\BeeroscopeDev\\\\source_code\\\\Beeroscope\\\\client\\\\src\\\\Table.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { taglist } from './data/taglist';\nimport './Table.css'; // All console.log()s are simply for debugging\n// Table React Component. Used to create tables with headers from JSON data. Currently does NOT support elements with sub-arrays/nested arrays.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Table extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getKeys = function () {\n      console.log(this.props.data[0]);\n      console.log(\"Test key print\");\n      console.log(this.props.data[0].getKeys()); // var keys = Object.keys(this.props.data[0]).slice(0, 3);\n      // if(taglist[0]) {\n      //     keys.push(this.props.data[0][6])\n      // }\n\n      return Object.keys(this.props.data[0]).slice(0, 3);\n    };\n\n    this.getHeader = function () {\n      var keys = this.getKeys();\n      console.log(\"~~~~~KEY LOGGING~~~~~~\");\n      return keys.map((key, index) => {\n        console.log(key);\n        return /*#__PURE__*/_jsxDEV(\"th\", {\n          children: key.toUpperCase()\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 20\n        }, this);\n      });\n    };\n\n    this.getRowsData = function () {\n      var items = this.props.data;\n      var keys = this.getKeys();\n      console.log(\"~~~~~INDEX LOGGING~~~~~~\");\n      return items.map((row, index) => {\n        console.log(index);\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(RenderRow, {\n            data: row,\n            keys: keys\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 36\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 20\n        }, this);\n      });\n    };\n\n    this.getHeader = this.getHeader.bind(this);\n    this.getRowsData = this.getRowsData.bind(this);\n    this.getKeys = this.getKeys.bind(this);\n  } // Gets the keys of the data, in this context it means to get the data categories. The keys we obtain are the first the which correspond to:\n  // 0: id, 1: beer name, 2: Beer's tagline\n  // An improvement would be to make this dynamic and dependent on user choice, there are about 30 other variables to choose from in the Punk API.\n\n\n  // Returns the Table in HTML form.\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"fl-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: this.getHeader()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.getRowsData()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n\n} // Returns the Row's data in TableData (td) entries. \n\nconst RenderRow = props => {\n  console.log(\"~~~~ROW LOGGING~~~~\");\n  return props.keys.map((key, index) => {\n    console.log(props.data[key]);\n    console.log(key);\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: props.data[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 47\n      }, this)\n    }, props.data[key] + 25, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this);\n  });\n};\n\n_c = RenderRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderRow\");","map":{"version":3,"sources":["K:/BeeroscopeDev/source_code/Beeroscope/client/src/Table.js"],"names":["React","ReactDOM","taglist","Table","Component","constructor","props","getKeys","console","log","data","Object","keys","slice","getHeader","map","key","index","toUpperCase","getRowsData","items","row","bind","render","RenderRow"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom' \r\nimport { taglist } from './data/taglist';\r\nimport './Table.css'\r\n\r\n// All console.log()s are simply for debugging\r\n// Table React Component. Used to create tables with headers from JSON data. Currently does NOT support elements with sub-arrays/nested arrays.\r\nexport default class Table extends React.Component {\r\n \r\n    constructor(props){\r\n    super(props);\r\n    this.getHeader = this.getHeader.bind(this);\r\n    this.getRowsData = this.getRowsData.bind(this);\r\n    this.getKeys = this.getKeys.bind(this);\r\n    }\r\n    \r\n    // Gets the keys of the data, in this context it means to get the data categories. The keys we obtain are the first the which correspond to:\r\n    // 0: id, 1: beer name, 2: Beer's tagline\r\n    // An improvement would be to make this dynamic and dependent on user choice, there are about 30 other variables to choose from in the Punk API.\r\n    getKeys = function(){\r\n        \r\n        console.log(this.props.data[0])\r\n        console.log(\"Test key print\");\r\n        console.log(this.props.data[0].getKeys());\r\n        // var keys = Object.keys(this.props.data[0]).slice(0, 3);\r\n        // if(taglist[0]) {\r\n        //     keys.push(this.props.data[0][6])\r\n        // }\r\n        return Object.keys(this.props.data[0]).slice(0, 3);\r\n    }\r\n    \r\n    // Get table headers using keys from the key-value pairs.\r\n    getHeader = function(){\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~KEY LOGGING~~~~~~\")\r\n        return keys.map((key, index)=>{\r\n            \r\n            console.log(key);\r\n            return <th key={key}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n    \r\n    // Obtain data for the rows uses the RenderRow component for rendering the row.\r\n    getRowsData = function(){\r\n        var items = this.props.data;\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~INDEX LOGGING~~~~~~\")\r\n        return items.map((row, index)=>{\r\n           \r\n            console.log(index);\r\n            return <tr key={index}><RenderRow key={index} data={row} keys={keys}/></tr>\r\n        })\r\n    }\r\n    \r\n    // Returns the Table in HTML form.\r\n    render() {\r\n        return (\r\n            <div className=\"table-wrapper\">\r\n            <table className=\"fl-table\">\r\n            <thead>\r\n            <tr>{this.getHeader()}</tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.getRowsData()}\r\n            </tbody>\r\n            </table>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n   }\r\n   // Returns the Row's data in TableData (td) entries. \r\n   const RenderRow = (props) =>{\r\n    console.log(\"~~~~ROW LOGGING~~~~\");\r\n    return props.keys.map((key, index)=>{\r\n        console.log(props.data[key])\r\n        console.log(key)\r\n        return <td key={props.data[key] + 25}><ul>{props.data[key]}</ul></td>\r\n    })\r\n   }"]},"metadata":{},"sourceType":"module"}