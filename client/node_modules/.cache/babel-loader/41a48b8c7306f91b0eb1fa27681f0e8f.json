{"ast":null,"code":"import _classCallCheck from\"C:/Users/kiann/Beeroscope/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/kiann/Beeroscope/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"C:/Users/kiann/Beeroscope/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"C:/Users/kiann/Beeroscope/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"C:/Users/kiann/Beeroscope/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React from'react';import ReactDOM from'react-dom';import'./Table.css';// All console.log()s are simply for debugging\n// Table React Component. Used to create tables with headers from JSON data. Currently does NOT support elements with sub-arrays/nested arrays.\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Table=/*#__PURE__*/function(_React$Component){_inherits(Table,_React$Component);var _super=_createSuper(Table);function Table(props){var _this;_classCallCheck(this,Table);_this=_super.call(this,props);_this.getKeys=function(){console.log(this.props.data);console.log(this.props.data[0]);return Object.keys(this.props.data[0]).slice(0,3);};_this.getHeader=function(){var keys=this.getKeys();console.log(\"~~~~~KEY LOGGING~~~~~~\");return keys.map(function(key,index){console.log(key);return/*#__PURE__*/_jsx(\"th\",{children:key.toUpperCase()},key);});};_this.getRowsData=function(){var items=this.props.data;var keys=this.getKeys();console.log(\"~~~~~INDEX LOGGING~~~~~~\");return items.map(function(row,index){console.log(index);return/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(RenderRow,{data:row,keys:keys},index)},index);});};_this.getHeader=_this.getHeader.bind(_assertThisInitialized(_this));_this.getRowsData=_this.getRowsData.bind(_assertThisInitialized(_this));_this.getKeys=_this.getKeys.bind(_assertThisInitialized(_this));return _this;}// Gets the keys of the data, in this context it means to get the data categories. The keys we obtain are the first the which correspond to:\n// 0: id, 1: beer name, 2: Beer's tagline\n// An improvement would be to make this dynamic and dependent on user choice, there are about 30 other variables to choose from in the Punk API.\n_createClass(Table,[{key:\"render\",value:// Returns the Table in HTML form.\nfunction render(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{children:this.getHeader()})}),/*#__PURE__*/_jsx(\"tbody\",{children:this.getRowsData()})]})});}}]);return Table;}(React.Component);// Returns the Row's data in TableData (td) entries. \nexport{Table as default};var RenderRow=function RenderRow(props){console.log(\"~~~~ROW LOGGING~~~~\");return props.keys.map(function(key,index){console.log(props.data[key]);console.log(key);return/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"ul\",{children:props.data[key]})},props.data[key]+25);});};","map":{"version":3,"sources":["C:/Users/kiann/Beeroscope/client/src/Table.js"],"names":["React","ReactDOM","Table","props","getKeys","console","log","data","Object","keys","slice","getHeader","map","key","index","toUpperCase","getRowsData","items","row","bind","Component","RenderRow"],"mappings":"8kBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAO,aAAP,CAEA;AACA;2FACqBC,CAAAA,K,0GAEjB,eAAYC,KAAZ,CAAkB,uCAClB,uBAAMA,KAAN,EADkB,MAUlBC,OAVkB,CAUR,UAAU,CAChBC,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWI,IAAvB,EACAF,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWI,IAAX,CAAgB,CAAhB,CAAZ,EACA,MAAOC,CAAAA,MAAM,CAACC,IAAP,CAAY,KAAKN,KAAL,CAAWI,IAAX,CAAgB,CAAhB,CAAZ,EAAgCG,KAAhC,CAAsC,CAAtC,CAAyC,CAAzC,CAAP,CACH,CAdiB,OAiBlBC,SAjBkB,CAiBN,UAAU,CAClB,GAAIF,CAAAA,IAAI,CAAG,KAAKL,OAAL,EAAX,CACAC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EACA,MAAOG,CAAAA,IAAI,CAACG,GAAL,CAAS,SAACC,GAAD,CAAMC,KAAN,CAAc,CAE1BT,OAAO,CAACC,GAAR,CAAYO,GAAZ,EACA,mBAAO,oBAAeA,GAAG,CAACE,WAAJ,EAAf,EAASF,GAAT,CAAP,CACH,CAJM,CAAP,CAKH,CAzBiB,OA4BlBG,WA5BkB,CA4BJ,UAAU,CACpB,GAAIC,CAAAA,KAAK,CAAG,KAAKd,KAAL,CAAWI,IAAvB,CACA,GAAIE,CAAAA,IAAI,CAAG,KAAKL,OAAL,EAAX,CACAC,OAAO,CAACC,GAAR,CAAY,0BAAZ,EACA,MAAOW,CAAAA,KAAK,CAACL,GAAN,CAAU,SAACM,GAAD,CAAMJ,KAAN,CAAc,CAE3BT,OAAO,CAACC,GAAR,CAAYQ,KAAZ,EACA,mBAAO,iCAAgB,KAAC,SAAD,EAAuB,IAAI,CAAEI,GAA7B,CAAkC,IAAI,CAAET,IAAxC,EAAgBK,KAAhB,CAAhB,EAASA,KAAT,CAAP,CACH,CAJM,CAAP,CAKH,CArCiB,CAElB,MAAKH,SAAL,CAAiB,MAAKA,SAAL,CAAeQ,IAAf,+BAAjB,CACA,MAAKH,WAAL,CAAmB,MAAKA,WAAL,CAAiBG,IAAjB,+BAAnB,CACA,MAAKf,OAAL,CAAe,MAAKA,OAAL,CAAae,IAAb,+BAAf,CAJkB,aAKjB,CAED;AACA;AACA;wCA8BA;AACA,iBAAS,CACL,mBACI,kCACA,sCACA,oCACA,oBAAK,KAAKR,SAAL,EAAL,EADA,EADA,cAIA,uBACC,KAAKK,WAAL,EADD,EAJA,GADA,EADJ,CAaH,C,mBAxD8BhB,KAAK,CAACoB,S,EA0DtC;OA1DkBlB,K,aA2DlB,GAAMmB,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAClB,KAAD,CAAU,CAC3BE,OAAO,CAACC,GAAR,CAAY,qBAAZ,EACA,MAAOH,CAAAA,KAAK,CAACM,IAAN,CAAWG,GAAX,CAAe,SAACC,GAAD,CAAMC,KAAN,CAAc,CAChCT,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,IAAN,CAAWM,GAAX,CAAZ,EACAR,OAAO,CAACC,GAAR,CAAYO,GAAZ,EACA,mBAAO,iCAA+B,oBAAKV,KAAK,CAACI,IAAN,CAAWM,GAAX,CAAL,EAA/B,EAASV,KAAK,CAACI,IAAN,CAAWM,GAAX,EAAkB,EAA3B,CAAP,CACH,CAJM,CAAP,CAKA,CAPD","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom' \r\nimport './Table.css'\r\n\r\n// All console.log()s are simply for debugging\r\n// Table React Component. Used to create tables with headers from JSON data. Currently does NOT support elements with sub-arrays/nested arrays.\r\nexport default class Table extends React.Component {\r\n \r\n    constructor(props){\r\n    super(props);\r\n    this.getHeader = this.getHeader.bind(this);\r\n    this.getRowsData = this.getRowsData.bind(this);\r\n    this.getKeys = this.getKeys.bind(this);\r\n    }\r\n    \r\n    // Gets the keys of the data, in this context it means to get the data categories. The keys we obtain are the first the which correspond to:\r\n    // 0: id, 1: beer name, 2: Beer's tagline\r\n    // An improvement would be to make this dynamic and dependent on user choice, there are about 30 other variables to choose from in the Punk API.\r\n    getKeys = function(){\r\n        console.log(this.props.data)\r\n        console.log(this.props.data[0])\r\n        return Object.keys(this.props.data[0]).slice(0, 3);\r\n    }\r\n    \r\n    // Get table headers using keys from the key-value pairs.\r\n    getHeader = function(){\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~KEY LOGGING~~~~~~\")\r\n        return keys.map((key, index)=>{\r\n            \r\n            console.log(key);\r\n            return <th key={key}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n    \r\n    // Obtain data for the rows uses the RenderRow component for rendering the row.\r\n    getRowsData = function(){\r\n        var items = this.props.data;\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~INDEX LOGGING~~~~~~\")\r\n        return items.map((row, index)=>{\r\n           \r\n            console.log(index);\r\n            return <tr key={index}><RenderRow key={index} data={row} keys={keys}/></tr>\r\n        })\r\n    }\r\n    \r\n    // Returns the Table in HTML form.\r\n    render() {\r\n        return (\r\n            <div>\r\n            <table>\r\n            <thead>\r\n            <tr>{this.getHeader()}</tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.getRowsData()}\r\n            </tbody>\r\n            </table>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n   }\r\n   // Returns the Row's data in TableData (td) entries. \r\n   const RenderRow = (props) =>{\r\n    console.log(\"~~~~ROW LOGGING~~~~\");\r\n    return props.keys.map((key, index)=>{\r\n        console.log(props.data[key])\r\n        console.log(key)\r\n        return <td key={props.data[key] + 25}><ul>{props.data[key]}</ul></td>\r\n    })\r\n   }"]},"metadata":{},"sourceType":"module"}