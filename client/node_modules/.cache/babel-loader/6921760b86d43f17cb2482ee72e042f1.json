{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\CPP_Proj\\\\Beeroscope\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TableComp from './Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [word, setWord] = React.useState('IPA');\n  const [associations, setAssociations] = React.useState(null);\n\n  const getAssociations = async () => {\n    const response = await fetch(`/api/associations/` + word); // Proxy API call to server back-end.\n\n    const data = await response.json(); // Response should already be in json but convert it just in case.\n\n    await setAssociations(data); // assign the data to the associations variable.\n\n    await console.log(`Length is: ${data.length}`);\n    await console.log(`-----SAMPLE ELEMENT-----\\n${data[0]}`); // Debug info, can be found in browser's console.\n  };\n\n  const getRandom = async () => {\n    const response = await fetch('/api/associations/');\n    const data = await response.json();\n    await setAssociations(data);\n  }; // Rendered HTML\n  // Sets up a button that grabs whatever is in the search bar and calls the API caller with that data.\n  // Then, it creates a table using the returned data, or shows \"No results\" if nothing is returned.\n  // More info on how the table is set up can be found inside the Table Component. (Table.js)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Beer Search!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: word,\n      onChange: e => setWord(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getAssociations,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getRandom,\n      children: \"Random!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), associations && (Object.keys(associations).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TableComp, {\n        data: associations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }, this)\n    }, \"table list\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2oV+HrpCcMad1WGN32T5g8tLeXA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/brian/CPP_Proj/Beeroscope/client/src/App.js"],"names":["logo","React","ReactDOM","TableComp","App","word","setWord","useState","associations","setAssociations","getAssociations","response","fetch","data","json","console","log","length","getRandom","e","target","value","Object","keys"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,SAAtB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,KAAK,CAACM,QAAN,CAAe,KAAf,CAAxB;AACA,QAAM,CAACC,YAAD,EAAgBC,eAAhB,IAAmCR,KAAK,CAACM,QAAN,CAAe,IAAf,CAAzC;;AAEA,QAAMG,eAAe,GAAG,YAAY;AAClC,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,oBAAD,GAAuBP,IAAxB,CAA5B,CADkC,CAC0B;;AAC5D,UAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAFkC,CAE0B;;AAC5D,UAAML,eAAe,CAACI,IAAD,CAArB,CAHkC,CAG0B;;AAC5D,UAAME,OAAO,CAACC,GAAR,CAAa,cAAaH,IAAI,CAACI,MAAO,EAAtC,CAAN;AACA,UAAMF,OAAO,CAACC,GAAR,CAAa,6BAA4BH,IAAI,CAAC,CAAD,CAAI,EAAjD,CAAN,CALkC,CAK0B;AAC7D,GAND;;AAQD,QAAMK,SAAS,GAAG,YAAY;AAC5B,UAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,UAAML,eAAe,CAACI,IAAD,CAArB;AACD,GAJD,CAZc,CAkBb;AACA;AACA;AACA;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,KAAK,EAAER,IAAd;AAAoB,MAAA,QAAQ,EAAEc,CAAC,IAAIb,OAAO,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV;AAA1C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAEX,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,OAAO,EAAEQ,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAKGV,YAAY,KACXc,MAAM,CAACC,IAAP,CAAYf,YAAZ,EAA0BS,MAA1B,KAAqC,CAArC,gBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,gBAEI;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,IAAI,EAAET;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF,OAAU,YAAV;AAAA;AAAA;AAAA;AAAA,YAHO,CALf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAtCQJ,G;;KAAAA,G;AAwCT,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom' \r\nimport TableComp from './Table';\r\n\r\nfunction App() {\r\n  const [word, setWord] = React.useState('IPA');\r\n  const [associations,  setAssociations] = React.useState(null);\r\n\r\n  const getAssociations = async () => {\r\n    const response = await fetch(`/api/associations/` + word);  // Proxy API call to server back-end.\r\n    const data = await response.json();                         // Response should already be in json but convert it just in case.\r\n    await setAssociations(data);                                // assign the data to the associations variable.\r\n    await console.log(`Length is: ${data.length}`);\r\n    await console.log(`-----SAMPLE ELEMENT-----\\n${data[0]}`);  // Debug info, can be found in browser's console.\r\n  };\r\n\r\n const getRandom = async () => {\r\n   const response = await fetch('/api/associations/');\r\n   const data = await response.json();\r\n   await setAssociations(data);\r\n }\r\n    \r\n  // Rendered HTML\r\n  // Sets up a button that grabs whatever is in the search bar and calls the API caller with that data.\r\n  // Then, it creates a table using the returned data, or shows \"No results\" if nothing is returned.\r\n  // More info on how the table is set up can be found inside the Table Component. (Table.js)\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Beer Search!</h1>\r\n      <input value={word} onChange={e => setWord(e.target.value)} />\r\n      <button onClick={getAssociations}>Search</button>\r\n      <button onClick={getRandom}>Random!</button>\r\n      {associations && (\r\n        Object.keys(associations).length === 0\r\n          ? <p>No results</p>\r\n          : <div key={\"table list\"}>\r\n              <TableComp data={associations}/>\r\n            </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}