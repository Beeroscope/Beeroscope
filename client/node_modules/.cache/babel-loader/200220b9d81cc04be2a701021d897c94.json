{"ast":null,"code":"var _jsxFileName = \"K:\\\\BeeroscopeDev\\\\source_code\\\\Beeroscope\\\\client\\\\src\\\\Table.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Table.css'; // All console.log()s are simply for debugging\n// Table React Component. Used to create tables with headers from JSON data. Currently does NOT support elements with sub-arrays/nested arrays.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Table extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getKeys = function () {\n      var temp = Object.keys(this.props.data[0]);\n      console.log(this.props.data[0]);\n      var keys = Object.keys(this.props.data[0]).slice(0, 3);\n      console.log(`Truth test: ${this.props.tags[0]} `);\n\n      if (this.props.tags[0]) {\n        keys.push(temp[6]);\n      }\n\n      if (this.props.tags[1]) {\n        keys.push(temp[7]);\n      }\n\n      if (this.props.tags[2]) {\n        keys.push(temp[5]);\n      }\n\n      if (this.props.tags[3]) {\n        keys.push(temp[13]);\n      }\n\n      if (this.props.tags[4]) {\n        keys.push(temp[3]);\n      }\n\n      return keys;\n    };\n\n    this.getHeader = function () {\n      var keys = this.getKeys();\n      console.log(\"~~~~~KEY LOGGING~~~~~~\");\n      return keys.map((key, index) => {\n        var headtitle = key;\n        headtitle = headtitle.replace(/_+/g, ' ');\n        console.log(headtitle);\n        return /*#__PURE__*/_jsxDEV(\"th\", {\n          children: headtitle.toUpperCase()\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 20\n        }, this);\n      });\n    };\n\n    this.getRowsData = function () {\n      var items = this.props.data;\n      var keys = this.getKeys();\n      console.log(\"~~~~~INDEX LOGGING~~~~~~\");\n      return items.map((row, index) => {\n        console.log(index);\n        console.log(items[index]);\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          onClick: () => this.getDetailedData(items[index]),\n          children: /*#__PURE__*/_jsxDEV(RenderRow, {\n            data: row,\n            keys: keys\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 87\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 20\n        }, this);\n      });\n    };\n\n    this.getFoodPairing = beer => {\n      var result = \"\";\n      var count = 0;\n      beer[\"food_pairing\"].map(index => {\n        if (count > 0) {\n          result += \", or \" + index;\n        } else {\n          count++;\n          result += index;\n        }\n      });\n      console.log(result);\n      return result;\n    };\n\n    this.getMethod = beer => {};\n\n    this.getIngredients = beer => {};\n\n    this.getDetailedData = function (beer) {\n      console.log(\"Detailed test: \" + beer[\"id\"]);\n      console.log(\"Nested test: \" + beer[\"volume\"][\"value\"] + \" \" + beer[\"volume\"][\"unit\"]);\n      const desc_info = beer[\"description\"];\n      const food_pairing = this.getFoodPairing(beer);\n      console.log(food_pairing);\n      const brewery_tips = beer[\"brewers_tips\"];\n      const volume = beer[\"volume\"][\"value\"] + \" \" + beer[\"volume\"][\"unit\"];\n      document.getElementById('volume').innerHTML = \"<br /><p>\" + volume + \"</p><br />\";\n      const ingredients = \"Ingredients: \\n \" + beer[\"ingredients\"][\"malt\"] + \"\\n Fermentation: \" + (beer[\"ingredients\"][\"fermentation\"] === \"[Object]\" ? null : beer[\"ingredients\"][\"fermentation\"]) + \"\\n Yeast: \" + beer[\"ingredients\"][\"yeast\"];\n      const method = this.getMethod(beer);\n      document.getElementById('Detail-section').innerHTML = \"<br /><p style={{color : \\\"#45f5f5\\\"}} > Food Pairing: \" + food_pairing + \" </p><br />\";\n    };\n\n    this.getHeader = this.getHeader.bind(this);\n    this.getRowsData = this.getRowsData.bind(this);\n    this.getKeys = this.getKeys.bind(this);\n    this.getDetailedData = this.getDetailedData.bind(this);\n    this.getFoodPairing = this.getFoodPairing.bind(this);\n    this.getMethod = this.getMethod.bind(this);\n  } // Gets the keys of the data, in this context it means to get the data categories. The keys we obtain are the first the which correspond to:\n  // 0: id, 1: beer name, 2: Beer's tagline\n  // An improvement would be to make this dynamic and dependent on user choice, there are about 30 other variables to choose from in the Punk API.\n\n\n  // Returns the Table in HTML form.\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"fl-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: this.getHeader()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.getRowsData()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"Detail-section\",\n        style: {\n          color: \"#45f5f5\"\n        },\n        className: \"detailed\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"foodpair\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"brewerytips\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"volume\",\n          children: \"Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n\n} // Returns the Row's data in TableData (td) entries. \n\nconst RenderRow = props => {\n  console.log(\"~~~~ROW LOGGING~~~~\");\n  return props.keys.map((key, index) => {\n    console.log(\"index: \" + index);\n    console.log(props.data[key]);\n    console.log(key);\n\n    if (key === \"image_url\") {\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: props.data[key],\n          className: \"photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 51\n        }, this)\n      }, props.data[key] + 25, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 20\n      }, this);\n    } else if (key === \"name\") {\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: props.data[key]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 51\n        }, this)\n      }, props.data[key] + 25, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: props.data[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 47\n      }, this)\n    }, props.data[key] + 25, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 16\n    }, this);\n  });\n};\n\n_c = RenderRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderRow\");","map":{"version":3,"sources":["K:/BeeroscopeDev/source_code/Beeroscope/client/src/Table.js"],"names":["React","ReactDOM","Table","Component","constructor","props","getKeys","temp","Object","keys","data","console","log","slice","tags","push","getHeader","map","key","index","headtitle","replace","toUpperCase","getRowsData","items","row","getDetailedData","getFoodPairing","beer","result","count","getMethod","getIngredients","desc_info","food_pairing","brewery_tips","volume","document","getElementById","innerHTML","ingredients","method","bind","render","color","RenderRow"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom' \r\nimport './Table.css'\r\n\r\n// All console.log()s are simply for debugging\r\n// Table React Component. Used to create tables with headers from JSON data. Currently does NOT support elements with sub-arrays/nested arrays.\r\nexport default class Table extends React.Component {\r\n \r\n    constructor(props){\r\n    super(props);\r\n    this.getHeader = this.getHeader.bind(this);\r\n    this.getRowsData = this.getRowsData.bind(this);\r\n    this.getKeys = this.getKeys.bind(this);\r\n    this.getDetailedData = this.getDetailedData.bind(this);\r\n    this.getFoodPairing = this.getFoodPairing.bind(this);\r\n    this.getMethod = this.getMethod.bind(this);\r\n\r\n    }\r\n    \r\n    // Gets the keys of the data, in this context it means to get the data categories. The keys we obtain are the first the which correspond to:\r\n    // 0: id, 1: beer name, 2: Beer's tagline\r\n    // An improvement would be to make this dynamic and dependent on user choice, there are about 30 other variables to choose from in the Punk API.\r\n    getKeys = function(){\r\n        var temp = Object.keys(this.props.data[0]);\r\n        console.log(this.props.data[0])\r\n        var keys = Object.keys(this.props.data[0]).slice(0, 3);\r\n        console.log(`Truth test: ${this.props.tags[0]} `);\r\n        if(this.props.tags[0]) {\r\n            keys.push(temp[6])\r\n        }\r\n        if(this.props.tags[1]) {\r\n            keys.push(temp[7])\r\n        }\r\n        if(this.props.tags[2]) {\r\n            keys.push(temp[5])\r\n        }\r\n        if(this.props.tags[3]) {\r\n            keys.push(temp[13])\r\n        }\r\n        if(this.props.tags[4]) {\r\n            keys.push(temp[3])\r\n        }\r\n        return keys;\r\n    }\r\n    \r\n    // Get table headers using keys from the key-value pairs.\r\n    getHeader = function(){\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~KEY LOGGING~~~~~~\")\r\n        return keys.map((key, index)=>{\r\n            var headtitle = key;\r\n            headtitle = headtitle.replace(/_+/g, ' ');\r\n            console.log(headtitle);\r\n            return <th key={key}>{headtitle.toUpperCase()}</th>\r\n        })\r\n    }\r\n    \r\n    // Obtain data for the rows uses the RenderRow component for rendering the row.\r\n    getRowsData = function(){\r\n        var items = this.props.data;\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~INDEX LOGGING~~~~~~\")\r\n        return items.map((row, index)=>{\r\n           \r\n            console.log(index);\r\n            console.log(items[index]);\r\n            return <tr key={index} onClick={() => this.getDetailedData(items[index])}><RenderRow key={index} data={row} keys={keys}/></tr>\r\n        })\r\n    }\r\n\r\n    getFoodPairing = (beer) => {\r\n        var result = \"\";\r\n        var count = 0\r\n        beer[\"food_pairing\"].map((index) => {\r\n            if(count > 0) {\r\n                result += \", or \" + index;\r\n            }\r\n            else{ \r\n                count++;\r\n                result += index; \r\n            }\r\n        });\r\n        console.log(result);\r\n        return result;\r\n    }\r\n\r\n    getMethod = (beer) => {\r\n\r\n    }\r\n\r\n    getIngredients = (beer) => {\r\n\r\n    }\r\n\r\n    getDetailedData = function(beer){\r\n        console.log(\"Detailed test: \" + beer[\"id\"]);\r\n        console.log(\"Nested test: \" + beer[\"volume\"][\"value\"] + \" \" + beer[\"volume\"][\"unit\"]);\r\n        const desc_info = beer[\"description\"];\r\n        const food_pairing = this.getFoodPairing(beer);\r\n        console.log(food_pairing);\r\n        const brewery_tips = beer[\"brewers_tips\"];\r\n        const volume = beer[\"volume\"][\"value\"] + \" \" + beer[\"volume\"][\"unit\"];\r\n        document.getElementById('volume').innerHTML = \"<br /><p>\" + volume + \"</p><br />\";\r\n        const ingredients = \"Ingredients: \\n \" + beer[\"ingredients\"][\"malt\"] + \"\\n Fermentation: \" + (beer[\"ingredients\"][\"fermentation\"] === \"[Object]\" ? null : beer[\"ingredients\"][\"fermentation\"]) + \"\\n Yeast: \" + beer[\"ingredients\"][\"yeast\"];\r\n        const method = this.getMethod(beer);\r\n\r\n       document.getElementById('Detail-section').innerHTML = \"<br /><p style={{color : \\\"#45f5f5\\\"}} > Food Pairing: \" + food_pairing + \" </p><br />\";\r\n    }\r\n\r\n    \r\n    // Returns the Table in HTML form.\r\n    render() {\r\n        \r\n\r\n        return (\r\n            <div className=\"table-wrapper\">\r\n                <table className=\"fl-table\">\r\n                <thead>\r\n                <tr>{this.getHeader()}</tr>\r\n                </thead>\r\n                <tbody>\r\n                {this.getRowsData()}\r\n                </tbody>\r\n                </table>\r\n                <div id='Detail-section' style={{color : \"#45f5f5\"}} className=\"detailed\">\r\n                    <p id=\"description\"></p>\r\n                    <p id=\"foodpair\"></p>\r\n                    <p id=\"brewerytips\"></p>\r\n                    <p id='volume'>Test</p>\r\n                </div>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n   }\r\n   // Returns the Row's data in TableData (td) entries. \r\n   const RenderRow = (props) =>{\r\n    console.log(\"~~~~ROW LOGGING~~~~\");\r\n    return props.keys.map((key, index)=>{\r\n        console.log(\"index: \" + index);\r\n        console.log(props.data[key])\r\n        console.log(key)\r\n        if(key === \"image_url\") {\r\n            \r\n            return <td key={props.data[key] + 25}><img src={props.data[key]} className=\"photo\"/></td>\r\n        }\r\n        else if(key === \"name\") {\r\n            return <td key={props.data[key] + 25}><ul>{props.data[key]}</ul></td>\r\n        }\r\n        return <td key={props.data[key] + 25}><ul>{props.data[key]}</ul></td>\r\n    })\r\n   }"]},"metadata":{},"sourceType":"module"}