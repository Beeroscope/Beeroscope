{"ast":null,"code":"var _jsxFileName = \"K:\\\\BeeroscopeDev\\\\source_code\\\\Beeroscope\\\\client\\\\src\\\\Table.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Table.css'; // All console.log()s are simply for debugging\n// Table React Component. Used to create tables with headers from JSON data. Currently does NOT support elements with sub-arrays/nested arrays.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Table extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getKeys = function () {\n      var temp = Object.keys(this.props.data[0]);\n      console.log(this.props.data[0]);\n      var keys = Object.keys(this.props.data[0]).slice(0, 3);\n      console.log(`Truth test: ${this.props.tags[0]} `);\n\n      if (this.props.tags[0]) {\n        keys.push(temp[6]);\n      }\n\n      if (this.props.tags[1]) {\n        keys.push(temp[7]);\n      }\n\n      if (this.props.tags[2]) {\n        keys.push(temp[5]);\n      }\n\n      if (this.props.tags[3]) {\n        keys.push(temp[13]);\n      }\n\n      if (this.props.tags[4]) {\n        keys.push(temp[3]);\n      }\n\n      return keys;\n    };\n\n    this.getHeader = function () {\n      var keys = this.getKeys();\n      console.log(\"~~~~~KEY LOGGING~~~~~~\");\n      return keys.map((key, index) => {\n        var headtitle = key;\n        headtitle.replace(/_/g, ' ');\n        console.log(key);\n        return /*#__PURE__*/_jsxDEV(\"th\", {\n          children: headtitle.toUpperCase()\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 20\n        }, this);\n      });\n    };\n\n    this.getRowsData = function () {\n      var items = this.props.data;\n      var keys = this.getKeys();\n      console.log(\"~~~~~INDEX LOGGING~~~~~~\");\n      return items.map((row, index) => {\n        console.log(index);\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(RenderRow, {\n            data: row,\n            keys: keys\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 36\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 20\n        }, this);\n      });\n    };\n\n    this.getHeader = this.getHeader.bind(this);\n    this.getRowsData = this.getRowsData.bind(this);\n    this.getKeys = this.getKeys.bind(this);\n  } // Gets the keys of the data, in this context it means to get the data categories. The keys we obtain are the first the which correspond to:\n  // 0: id, 1: beer name, 2: Beer's tagline\n  // An improvement would be to make this dynamic and dependent on user choice, there are about 30 other variables to choose from in the Punk API.\n\n\n  // Returns the Table in HTML form.\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"fl-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: this.getHeader()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.getRowsData()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n} // Returns the Row's data in TableData (td) entries. \n\nconst RenderRow = props => {\n  console.log(\"~~~~ROW LOGGING~~~~\");\n  return props.keys.map((key, index) => {\n    console.log(props.data[key]);\n    console.log(key);\n\n    if (key === \"image_url\") {\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: props.data[key],\n          className: \"photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 51\n        }, this)\n      }, props.data[key] + 25, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: props.data[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 47\n      }, this)\n    }, props.data[key] + 25, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 16\n    }, this);\n  });\n};\n\n_c = RenderRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderRow\");","map":{"version":3,"sources":["K:/BeeroscopeDev/source_code/Beeroscope/client/src/Table.js"],"names":["React","ReactDOM","Table","Component","constructor","props","getKeys","temp","Object","keys","data","console","log","slice","tags","push","getHeader","map","key","index","headtitle","replace","toUpperCase","getRowsData","items","row","bind","render","RenderRow"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP,C,CAEA;AACA;;;AACA,eAAe,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAE/CC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAClB,UAAMA,KAAN;;AADkB,SAUlBC,OAVkB,GAUR,YAAU;AAChB,UAAIC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKJ,KAAL,CAAWK,IAAX,CAAgB,CAAhB,CAAZ,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWK,IAAX,CAAgB,CAAhB,CAAZ;AACA,UAAID,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY,KAAKJ,KAAL,CAAWK,IAAX,CAAgB,CAAhB,CAAZ,EAAgCG,KAAhC,CAAsC,CAAtC,EAAyC,CAAzC,CAAX;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAa,eAAc,KAAKP,KAAL,CAAWS,IAAX,CAAgB,CAAhB,CAAmB,GAA9C;;AACA,UAAG,KAAKT,KAAL,CAAWS,IAAX,CAAgB,CAAhB,CAAH,EAAuB;AACnBL,QAAAA,IAAI,CAACM,IAAL,CAAUR,IAAI,CAAC,CAAD,CAAd;AACH;;AACD,UAAG,KAAKF,KAAL,CAAWS,IAAX,CAAgB,CAAhB,CAAH,EAAuB;AACnBL,QAAAA,IAAI,CAACM,IAAL,CAAUR,IAAI,CAAC,CAAD,CAAd;AACH;;AACD,UAAG,KAAKF,KAAL,CAAWS,IAAX,CAAgB,CAAhB,CAAH,EAAuB;AACnBL,QAAAA,IAAI,CAACM,IAAL,CAAUR,IAAI,CAAC,CAAD,CAAd;AACH;;AACD,UAAG,KAAKF,KAAL,CAAWS,IAAX,CAAgB,CAAhB,CAAH,EAAuB;AACnBL,QAAAA,IAAI,CAACM,IAAL,CAAUR,IAAI,CAAC,EAAD,CAAd;AACH;;AACD,UAAG,KAAKF,KAAL,CAAWS,IAAX,CAAgB,CAAhB,CAAH,EAAuB;AACnBL,QAAAA,IAAI,CAACM,IAAL,CAAUR,IAAI,CAAC,CAAD,CAAd;AACH;;AACD,aAAOE,IAAP;AACH,KA/BiB;;AAAA,SAkClBO,SAlCkB,GAkCN,YAAU;AAClB,UAAIP,IAAI,GAAG,KAAKH,OAAL,EAAX;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,aAAOH,IAAI,CAACQ,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAc;AAC1B,YAAIC,SAAS,GAAGF,GAAhB;AACAE,QAAAA,SAAS,CAACC,OAAV,CAAkB,IAAlB,EAAwB,GAAxB;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACA,4BAAO;AAAA,oBAAeE,SAAS,CAACE,WAAV;AAAf,WAASJ,GAAT;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OALM,CAAP;AAMH,KA3CiB;;AAAA,SA8ClBK,WA9CkB,GA8CJ,YAAU;AACpB,UAAIC,KAAK,GAAG,KAAKnB,KAAL,CAAWK,IAAvB;AACA,UAAID,IAAI,GAAG,KAAKH,OAAL,EAAX;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,aAAOY,KAAK,CAACP,GAAN,CAAU,CAACQ,GAAD,EAAMN,KAAN,KAAc;AAE3BR,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,4BAAO;AAAA,iCAAgB,QAAC,SAAD;AAAuB,YAAA,IAAI,EAAEM,GAA7B;AAAkC,YAAA,IAAI,EAAEhB;AAAxC,aAAgBU,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAhB,WAASA,KAAT;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAJM,CAAP;AAKH,KAvDiB;;AAElB,SAAKH,SAAL,GAAiB,KAAKA,SAAL,CAAeU,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKH,WAAL,GAAmB,KAAKA,WAAL,CAAiBG,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKpB,OAAL,GAAe,KAAKA,OAAL,CAAaoB,IAAb,CAAkB,IAAlB,CAAf;AACC,GAP8C,CAS/C;AACA;AACA;;;AAgDA;AACAC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACA;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA,gCACA;AAAA,iCACA;AAAA,sBAAK,KAAKX,SAAL;AAAL;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADA,eAIA;AAAA,oBACC,KAAKO,WAAL;AADD;AAAA;AAAA;AAAA;AAAA,gBAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AA1E8C,C,CA4EhD;;AACA,MAAMK,SAAS,GAAIvB,KAAD,IAAU;AAC3BM,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,SAAOP,KAAK,CAACI,IAAN,CAAWQ,GAAX,CAAe,CAACC,GAAD,EAAMC,KAAN,KAAc;AAChCR,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACK,IAAN,CAAWQ,GAAX,CAAZ;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;;AACA,QAAGA,GAAG,KAAK,WAAX,EAAwB;AAEpB,0BAAO;AAAA,+BAA+B;AAAK,UAAA,GAAG,EAAEb,KAAK,CAACK,IAAN,CAAWQ,GAAX,CAAV;AAA2B,UAAA,SAAS,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA;AAA/B,SAASb,KAAK,CAACK,IAAN,CAAWQ,GAAX,IAAkB,EAA3B;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,wBAAO;AAAA,6BAA+B;AAAA,kBAAKb,KAAK,CAACK,IAAN,CAAWQ,GAAX;AAAL;AAAA;AAAA;AAAA;AAAA;AAA/B,OAASb,KAAK,CAACK,IAAN,CAAWQ,GAAX,IAAkB,EAA3B;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GARM,CAAP;AASA,CAXD;;KAAMU,S","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom' \r\nimport './Table.css'\r\n\r\n// All console.log()s are simply for debugging\r\n// Table React Component. Used to create tables with headers from JSON data. Currently does NOT support elements with sub-arrays/nested arrays.\r\nexport default class Table extends React.Component {\r\n \r\n    constructor(props){\r\n    super(props);\r\n    this.getHeader = this.getHeader.bind(this);\r\n    this.getRowsData = this.getRowsData.bind(this);\r\n    this.getKeys = this.getKeys.bind(this);\r\n    }\r\n    \r\n    // Gets the keys of the data, in this context it means to get the data categories. The keys we obtain are the first the which correspond to:\r\n    // 0: id, 1: beer name, 2: Beer's tagline\r\n    // An improvement would be to make this dynamic and dependent on user choice, there are about 30 other variables to choose from in the Punk API.\r\n    getKeys = function(){\r\n        var temp = Object.keys(this.props.data[0]);\r\n        console.log(this.props.data[0])\r\n        var keys = Object.keys(this.props.data[0]).slice(0, 3);\r\n        console.log(`Truth test: ${this.props.tags[0]} `);\r\n        if(this.props.tags[0]) {\r\n            keys.push(temp[6])\r\n        }\r\n        if(this.props.tags[1]) {\r\n            keys.push(temp[7])\r\n        }\r\n        if(this.props.tags[2]) {\r\n            keys.push(temp[5])\r\n        }\r\n        if(this.props.tags[3]) {\r\n            keys.push(temp[13])\r\n        }\r\n        if(this.props.tags[4]) {\r\n            keys.push(temp[3])\r\n        }\r\n        return keys;\r\n    }\r\n    \r\n    // Get table headers using keys from the key-value pairs.\r\n    getHeader = function(){\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~KEY LOGGING~~~~~~\")\r\n        return keys.map((key, index)=>{\r\n            var headtitle = key;\r\n            headtitle.replace(/_/g, ' ');\r\n            console.log(key);\r\n            return <th key={key}>{headtitle.toUpperCase()}</th>\r\n        })\r\n    }\r\n    \r\n    // Obtain data for the rows uses the RenderRow component for rendering the row.\r\n    getRowsData = function(){\r\n        var items = this.props.data;\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~INDEX LOGGING~~~~~~\")\r\n        return items.map((row, index)=>{\r\n           \r\n            console.log(index);\r\n            return <tr key={index}><RenderRow key={index} data={row} keys={keys}/></tr>\r\n        })\r\n    }\r\n    \r\n    // Returns the Table in HTML form.\r\n    render() {\r\n        return (\r\n            <div className=\"table-wrapper\">\r\n            <table className=\"fl-table\">\r\n            <thead>\r\n            <tr>{this.getHeader()}</tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.getRowsData()}\r\n            </tbody>\r\n            </table>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n   }\r\n   // Returns the Row's data in TableData (td) entries. \r\n   const RenderRow = (props) =>{\r\n    console.log(\"~~~~ROW LOGGING~~~~\");\r\n    return props.keys.map((key, index)=>{\r\n        console.log(props.data[key])\r\n        console.log(key)\r\n        if(key === \"image_url\") {\r\n            \r\n            return <td key={props.data[key] + 25}><img src={props.data[key]} className=\"photo\"/></td>\r\n        }\r\n        return <td key={props.data[key] + 25}><ul>{props.data[key]}</ul></td>\r\n    })\r\n   }"]},"metadata":{},"sourceType":"module"}