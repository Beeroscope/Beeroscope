[{"C:\\Users\\kiann\\Beeroscope\\client\\src\\index.js":"1","C:\\Users\\kiann\\Beeroscope\\client\\src\\App.js":"2","C:\\Users\\kiann\\Beeroscope\\client\\src\\reportWebVitals.js":"3","C:\\Users\\kiann\\Beeroscope\\client\\src\\Table.js":"4"},{"size":517,"mtime":1650328346045,"results":"5","hashOfConfig":"6"},{"size":4003,"mtime":1651717415267,"results":"7","hashOfConfig":"6"},{"size":375,"mtime":1650328346047,"results":"8","hashOfConfig":"6"},{"size":2533,"mtime":1650328346045,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yy3pbu",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\kiann\\Beeroscope\\client\\src\\index.js",[],[],"C:\\Users\\kiann\\Beeroscope\\client\\src\\App.js",["23","24","25","26","27","28","29","30","31","32","33","34","35"],[],"C:\\Users\\kiann\\Beeroscope\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\kiann\\Beeroscope\\client\\src\\Table.js",["36"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom' \r\nimport './Table.css'\r\n\r\n// All console.log()s are simply for debugging\r\n// Table React Component. Used to create tables with headers from JSON data. Currently does NOT support elements with sub-arrays/nested arrays.\r\nexport default class Table extends React.Component {\r\n \r\n    constructor(props){\r\n    super(props);\r\n    this.getHeader = this.getHeader.bind(this);\r\n    this.getRowsData = this.getRowsData.bind(this);\r\n    this.getKeys = this.getKeys.bind(this);\r\n    }\r\n    \r\n    // Gets the keys of the data, in this context it means to get the data categories. The keys we obtain are the first the which correspond to:\r\n    // 0: id, 1: beer name, 2: Beer's tagline\r\n    // An improvement would be to make this dynamic and dependent on user choice, there are about 30 other variables to choose from in the Punk API.\r\n    getKeys = function(){\r\n        console.log(this.props.data)\r\n        console.log(this.props.data[0])\r\n        return Object.keys(this.props.data[0]).slice(0, 3);\r\n    }\r\n    \r\n    // Get table headers using keys from the key-value pairs.\r\n    getHeader = function(){\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~KEY LOGGING~~~~~~\")\r\n        return keys.map((key, index)=>{\r\n            \r\n            console.log(key);\r\n            return <th key={key}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n    \r\n    // Obtain data for the rows uses the RenderRow component for rendering the row.\r\n    getRowsData = function(){\r\n        var items = this.props.data;\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~INDEX LOGGING~~~~~~\")\r\n        return items.map((row, index)=>{\r\n           \r\n            console.log(index);\r\n            return <tr key={index}><RenderRow key={index} data={row} keys={keys}/></tr>\r\n        })\r\n    }\r\n    \r\n    // Returns the Table in HTML form.\r\n    render() {\r\n        return (\r\n            <div>\r\n            <table>\r\n            <thead>\r\n            <tr>{this.getHeader()}</tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.getRowsData()}\r\n            </tbody>\r\n            </table>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n   }\r\n   // Returns the Row's data in TableData (td) entries. \r\n   const RenderRow = (props) =>{\r\n    console.log(\"~~~~ROW LOGGING~~~~\");\r\n    return props.keys.map((key, index)=>{\r\n        console.log(props.data[key])\r\n        console.log(key)\r\n        return <td key={props.data[key] + 25}><ul>{props.data[key]}</ul></td>\r\n    })\r\n   }",{"ruleId":"37","severity":1,"message":"38","line":41,"column":2,"nodeType":"39","messageId":"40","endLine":43,"endColumn":6},{"ruleId":"41","severity":1,"message":"42","line":60,"column":52,"nodeType":"43","endLine":60,"endColumn":120},{"ruleId":"41","severity":1,"message":"42","line":63,"column":53,"nodeType":"43","endLine":63,"endColumn":121},{"ruleId":"41","severity":1,"message":"42","line":66,"column":53,"nodeType":"43","endLine":66,"endColumn":121},{"ruleId":"41","severity":1,"message":"42","line":69,"column":53,"nodeType":"43","endLine":69,"endColumn":121},{"ruleId":"41","severity":1,"message":"42","line":75,"column":50,"nodeType":"43","endLine":75,"endColumn":118},{"ruleId":"41","severity":1,"message":"42","line":78,"column":52,"nodeType":"43","endLine":78,"endColumn":120},{"ruleId":"41","severity":1,"message":"42","line":81,"column":52,"nodeType":"43","endLine":81,"endColumn":120},{"ruleId":"41","severity":1,"message":"42","line":84,"column":54,"nodeType":"43","endLine":84,"endColumn":122},{"ruleId":"41","severity":1,"message":"42","line":90,"column":58,"nodeType":"43","endLine":90,"endColumn":126},{"ruleId":"41","severity":1,"message":"42","line":93,"column":56,"nodeType":"43","endLine":93,"endColumn":124},{"ruleId":"41","severity":1,"message":"42","line":96,"column":55,"nodeType":"43","endLine":96,"endColumn":123},{"ruleId":"41","severity":1,"message":"42","line":99,"column":53,"nodeType":"43","endLine":99,"endColumn":121},{"ruleId":"44","severity":1,"message":"45","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":16},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar"]