[{"C:\\Users\\kiann\\Beeroscope\\client\\src\\index.js":"1","C:\\Users\\kiann\\Beeroscope\\client\\src\\App.js":"2","C:\\Users\\kiann\\Beeroscope\\client\\src\\reportWebVitals.js":"3","C:\\Users\\kiann\\Beeroscope\\client\\src\\Table.js":"4"},{"size":517,"mtime":1650328346045,"results":"5","hashOfConfig":"6"},{"size":1638,"mtime":1650345931449,"results":"7","hashOfConfig":"6"},{"size":375,"mtime":1650328346047,"results":"8","hashOfConfig":"6"},{"size":2533,"mtime":1650328346045,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yy3pbu",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\kiann\\Beeroscope\\client\\src\\index.js",[],[],"C:\\Users\\kiann\\Beeroscope\\client\\src\\App.js",["24","25"],[],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom' \r\nimport TableComp from './Table';\r\n\r\nfunction App() {\r\n  const [word, setWord] = React.useState('IPA');\r\n  const [associations,  setAssociations] = React.useState(null);\r\n  const getAssociations = async () => {\r\n    const response = await fetch(`/api/associations/` + word);  // Proxy API call to server back-end.\r\n    const data = await response.json();                         // Response should already be in json but convert it just in case.\r\n    await setAssociations(data);                                // assign the data to the associations variable.\r\n    await console.log(`Length is: ${data.length}`);\r\n    await console.log(`-----SAMPLE ELEMENT-----\\n${data[0]}`);  // Debug info, can be found in browser's console.\r\n  };\r\n    \r\n  // Rendered HTML\r\n  // Sets up a button that grabs whatever is in the search bar and calls the API caller with that data.\r\n  // Then, it creates a table using the returned data, or shows \"No results\" if nothing is returned.\r\n  // More info on how the table is set up can be found inside the Table Component. (Table.js)\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Beer Search!</h1>\r\n      <input value={word} onChange={e => setWord(e.target.value)} />\r\n      <button onClick={getAssociations}>Search</button>\r\n      {associations && (\r\n        Object.keys(associations).length === 0\r\n          ? <p>No results</p>\r\n          : <div key={\"table list\"}>\r\n              <TableComp data={associations}/>\r\n            </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\kiann\\Beeroscope\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\kiann\\Beeroscope\\client\\src\\Table.js",["26"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom' \r\nimport './Table.css'\r\n\r\n// All console.log()s are simply for debugging\r\n// Table React Component. Used to create tables with headers from JSON data. Currently does NOT support elements with sub-arrays/nested arrays.\r\nexport default class Table extends React.Component {\r\n \r\n    constructor(props){\r\n    super(props);\r\n    this.getHeader = this.getHeader.bind(this);\r\n    this.getRowsData = this.getRowsData.bind(this);\r\n    this.getKeys = this.getKeys.bind(this);\r\n    }\r\n    \r\n    // Gets the keys of the data, in this context it means to get the data categories. The keys we obtain are the first the which correspond to:\r\n    // 0: id, 1: beer name, 2: Beer's tagline\r\n    // An improvement would be to make this dynamic and dependent on user choice, there are about 30 other variables to choose from in the Punk API.\r\n    getKeys = function(){\r\n        console.log(this.props.data)\r\n        console.log(this.props.data[0])\r\n        return Object.keys(this.props.data[0]).slice(0, 3);\r\n    }\r\n    \r\n    // Get table headers using keys from the key-value pairs.\r\n    getHeader = function(){\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~KEY LOGGING~~~~~~\")\r\n        return keys.map((key, index)=>{\r\n            \r\n            console.log(key);\r\n            return <th key={key}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n    \r\n    // Obtain data for the rows uses the RenderRow component for rendering the row.\r\n    getRowsData = function(){\r\n        var items = this.props.data;\r\n        var keys = this.getKeys();\r\n        console.log(\"~~~~~INDEX LOGGING~~~~~~\")\r\n        return items.map((row, index)=>{\r\n           \r\n            console.log(index);\r\n            return <tr key={index}><RenderRow key={index} data={row} keys={keys}/></tr>\r\n        })\r\n    }\r\n    \r\n    // Returns the Table in HTML form.\r\n    render() {\r\n        return (\r\n            <div>\r\n            <table>\r\n            <thead>\r\n            <tr>{this.getHeader()}</tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.getRowsData()}\r\n            </tbody>\r\n            </table>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n   }\r\n   // Returns the Row's data in TableData (td) entries. \r\n   const RenderRow = (props) =>{\r\n    console.log(\"~~~~ROW LOGGING~~~~\");\r\n    return props.keys.map((key, index)=>{\r\n        console.log(props.data[key])\r\n        console.log(key)\r\n        return <td key={props.data[key] + 25}><ul>{props.data[key]}</ul></td>\r\n    })\r\n   }",{"ruleId":"27","severity":1,"message":"28","line":1,"column":8,"nodeType":"29","messageId":"30","endLine":1,"endColumn":12},{"ruleId":"27","severity":1,"message":"31","line":4,"column":8,"nodeType":"29","messageId":"30","endLine":4,"endColumn":16},{"ruleId":"27","severity":1,"message":"31","line":2,"column":8,"nodeType":"29","messageId":"30","endLine":2,"endColumn":16},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used."]